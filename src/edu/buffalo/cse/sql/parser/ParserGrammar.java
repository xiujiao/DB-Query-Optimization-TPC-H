/* Generated By:JavaCC: Do not edit this line. ParserGrammar.java */
package edu.buffalo.cse.sql.parser;

import java.util.ArrayList;
import java.util.Map;
import java.util.List;
import java.io.File;
import edu.buffalo.cse.sql.Schema;
import edu.buffalo.cse.sql.data.Datum;
import edu.buffalo.cse.sql.plan.*;
import edu.buffalo.cse.sql.io.Readtable;
import java.util.regex.*;
import java.io.FileNotFoundException;


public class ParserGrammar implements ParserGrammarConstants {
  public static void main(String args []) throws ParseException
  {
    ParserGrammar parser;
    if(args.length == 1)
    {
      try {
                parser  = new ParserGrammar(new java.io.FileInputStream(args[0]));
        } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
        }
  }

  }

// Function definition
// total query parser function
  static final public ArrayList<PlanNode> PARSERSQL(Map<String, Schema.TableFromFile> tables) throws ParseException {
  ArrayList<PlanNode> query;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SELECT:
      query = SELECT(tables);
      break;
    case K_CREATE:
      query = CREATE(tables);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

//CREATE TABLE R (A int, B int) FROM FILE 'test/r.dat' USING CSV;
//create function
  static final public ArrayList<PlanNode> CREATE(Map<String, Schema.TableFromFile> tables) throws ParseException {
  ArrayList<PlanNode> query;
  Token filename;
  Token tablename;
  Token columnname1;
  Token columnname2;
    label_1:
    while (true) {
      label_2:
      while (true) {
        jj_consume_token(K_CREATE);
        jj_consume_token(K_TABLE);
        tablename = jj_consume_token(LETTER);
        jj_consume_token(K_PAR);
        columnname1 = jj_consume_token(LETTER);
        jj_consume_token(K_INT);
        jj_consume_token(K_COMMA);
        columnname2 = jj_consume_token(LETTER);
        jj_consume_token(K_INT);
        jj_consume_token(K_PAR);
        jj_consume_token(K_FROM);
        jj_consume_token(K_FILE);
        filename = jj_consume_token(FILEPATH);
        jj_consume_token(K_USING);
        jj_consume_token(K_CSV);
        jj_consume_token(35);
    Schema.TableFromFile table_R;
    table_R = new Schema.TableFromFile(new File(filename.image.substring(1,filename.image.length()-1)));
    table_R.add(new Schema.Column(tablename.image, columnname1.image, Schema.Type.INT));
    table_R.add(new Schema.Column(tablename.image, columnname2.image, Schema.Type.INT));
    tables.put(tablename.image, table_R);
     System.out.println(tables);
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
      }
      query = SELECT(tables);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CREATE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
      {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

// select function
  static final public ArrayList<PlanNode> SELECT(Map<String, Schema.TableFromFile> tables) throws ParseException {
  ProjectionNode query1=new ProjectionNode();
  ProjectionNode query_1 = new ProjectionNode();
  UnionNode query2=new UnionNode();
  AggregateNode query4 = new AggregateNode();
  PlanNode query3=null;
  ArrayList<PlanNode> query=new ArrayList<PlanNode>();
  Token t1=null;        Token t1_1=null;        Token t1_2=null;        Token t1_3=null;
  Token tc1=null;   Token tc1_1=null;   Token tc1_2=null;       Token tc1_3=null;// colname
  Token t2=null;        Token t2_1=null;
  Token t3=null;
  Token t4=null;
  Token t5=null;
  Token t6=null;
  Token t7=null;
  Token t8=null;
  Token t9=null;
  Token p1=null;

  Token u1=null;        Token u2=null;

  Token t11=null;       Token t11_1=null;
  Token t22=null;       Token t22_1=null;
  Token t33=null;
  Token t44=null;
  Token t55=null;
  Token t66=null;
  Token t77=null;
  Token t88=null;
  Token t99=null;
  Token p11=null;

  Token t111=null;      Token t111_1=null;
  Token t222=null;      Token t222_1=null;

  Token tN1=null;       Token tN1_1=null;       Token tN1_2=null;
  Token tN2=null;
  Token tN3=null;// table name

  Token j1=null;//join
  Token o1=null;//on
  Token oc1=null;
  Token o2=null;
  Token oc2=null;

  Token w1=null;        Token w11=null;         Token w111=null;
  Token wc1=null;       Token wc11=null;        Token wc111=null;
  Token w2=null;        Token w22=null;         Token w222=null;
  Token wc2=null;       Token wc22=null;        Token wc222=null;

  Token com1=null;//compare
  Token com2=null;
  Token com3=null;

  Token aor1=null;
  Token aor2=null;

  Token p2=null;
  Token p3=null;
  Token p4=null;
  Token p5=null;
  Token p6=null;
  Token p7=null;
  Token p8=null;
  Token p9=null;

  Token a1=null;//aggregate
  Token a2=null;Token l2=null;Token l3=null;

  int i1;
  int i2;

  float f1;
  String s1;

  Token S1=null; Token S2=null; Token S3=null; Token S4=null; Token S5=null; Token S6=null; Token S7=null; Token S8=null;
  Token st1=null; Token st2=null;
    jj_consume_token(K_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AGG:
      a1 = jj_consume_token(K_AGG);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_PAR:
      p1 = jj_consume_token(K_PAR);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t1 = jj_consume_token(INTEGER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAL:
        t4 = jj_consume_token(CAL);
        t5 = jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAL:
        t9 = jj_consume_token(CAL);
        t8 = jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      break;
    case FLOAT:
      t1 = jj_consume_token(FLOAT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAL:
        t4 = jj_consume_token(CAL);
        t5 = jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      break;
    case CAL:
      t1 = jj_consume_token(CAL);
      jj_consume_token(K_PAR);
      break;
    case K_NOT:
    case LETTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        t3 = jj_consume_token(K_NOT);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      t1 = jj_consume_token(LETTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
        tc1 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        t6 = jj_consume_token(K_AND);
        t7 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAL:
        jj_consume_token(CAL);
        l3 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p1 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
    case K_AS:
    case 35:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      case 35:
        jj_consume_token(35);
        break;
      case K_AS:
        jj_consume_token(K_AS);
        t2 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_COMMA:
      jj_consume_token(K_COMMA);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AGG:
      a2 = jj_consume_token(K_AGG);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_PAR:
    case K_NOT:
    case FLOAT:
    case INTEGER:
    case LETTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p1 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t1_1 = jj_consume_token(INTEGER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAL:
          t4 = jj_consume_token(CAL);
          t5 = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PAR:
          jj_consume_token(K_PAR);
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAL:
          t9 = jj_consume_token(CAL);
          t8 = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        break;
      case FLOAT:
        t1 = jj_consume_token(FLOAT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAL:
          t4 = jj_consume_token(CAL);
          t5 = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        break;
      case K_NOT:
      case LETTER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          t3 = jj_consume_token(K_NOT);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        t1_1 = jj_consume_token(LETTER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          jj_consume_token(36);
          tc1_1 = jj_consume_token(LETTER);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AND:
          t6 = jj_consume_token(K_AND);
          t7 = jj_consume_token(LETTER);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAL:
          jj_consume_token(CAL);
          l2 = jj_consume_token(LETTER);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PAR:
          p1 = jj_consume_token(K_PAR);
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        jj_consume_token(K_COMMA);
        t1_2 = jj_consume_token(LETTER);
        jj_consume_token(36);
        tc1_2 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        jj_consume_token(K_COMMA);
        t1_3 = jj_consume_token(LETTER);
        jj_consume_token(36);
        tc1_3 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case K_AS:
      case 35:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
          jj_consume_token(0);
          break;
        case 35:
          jj_consume_token(35);
          break;
        case K_AS:
          jj_consume_token(K_AS);
          t2_1 = jj_consume_token(LETTER);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FROM:
      jj_consume_token(K_FROM);
      tN1 = jj_consume_token(LETTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        jj_consume_token(K_COMMA);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_JOIN:
        j1 = jj_consume_token(K_JOIN);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETTER:
        tN1_1 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        jj_consume_token(K_COMMA);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETTER:
        tN1_2 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ON:
      jj_consume_token(K_ON);
      o1 = jj_consume_token(LETTER);
      jj_consume_token(36);
      oc1 = jj_consume_token(LETTER);
      com1 = jj_consume_token(K_COMPARE);
      o2 = jj_consume_token(LETTER);
      jj_consume_token(36);
      oc2 = jj_consume_token(LETTER);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      jj_consume_token(K_WHERE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p2 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p3 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      w1 = jj_consume_token(LETTER);
      jj_consume_token(36);
      wc1 = jj_consume_token(LETTER);
      com1 = jj_consume_token(K_COMPARE);
      w2 = jj_consume_token(LETTER);
      jj_consume_token(36);
      wc2 = jj_consume_token(LETTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p4 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        aor1 = jj_consume_token(K_AND);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p7 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p5 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETTER:
        w11 = jj_consume_token(LETTER);
        jj_consume_token(36);
        wc11 = jj_consume_token(LETTER);
        com2 = jj_consume_token(K_COMPARE);
        w22 = jj_consume_token(LETTER);
        jj_consume_token(36);
        wc22 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p6 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        aor2 = jj_consume_token(K_AND);
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p8 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETTER:
        w111 = jj_consume_token(LETTER);
        jj_consume_token(36);
        wc111 = jj_consume_token(LETTER);
        com3 = jj_consume_token(K_COMPARE);
        w222 = jj_consume_token(LETTER);
        jj_consume_token(36);
        wc222 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p9 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_UNION:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_3;
      }
      u1 = jj_consume_token(K_UNION);
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_4;
      }
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p11 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t11 = jj_consume_token(INTEGER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAL:
          t44 = jj_consume_token(CAL);
          t55 = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[57] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PAR:
          jj_consume_token(K_PAR);
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAL:
          t99 = jj_consume_token(CAL);
          t88 = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[59] = jj_gen;
          ;
        }
        break;
      case FLOAT:
        t11 = jj_consume_token(FLOAT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAL:
          t44 = jj_consume_token(CAL);
          t55 = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        break;
      case K_NOT:
      case LETTER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          t33 = jj_consume_token(K_NOT);
          break;
        default:
          jj_la1[61] = jj_gen;
          ;
        }
        t11 = jj_consume_token(LETTER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AND:
          t66 = jj_consume_token(K_AND);
          t77 = jj_consume_token(LETTER);
          break;
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case K_AS:
      case 35:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
          jj_consume_token(0);
          break;
        case 35:
          jj_consume_token(35);
          break;
        case K_AS:
          jj_consume_token(K_AS);
          t22 = jj_consume_token(LETTER);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        jj_consume_token(K_COMMA);
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
      case K_NOT:
      case FLOAT:
      case INTEGER:
      case LETTER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PAR:
          p11 = jj_consume_token(K_PAR);
          break;
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t11_1 = jj_consume_token(INTEGER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CAL:
            t44 = jj_consume_token(CAL);
            t55 = jj_consume_token(INTEGER);
            break;
          default:
            jj_la1[68] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_PAR:
            jj_consume_token(K_PAR);
            break;
          default:
            jj_la1[69] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CAL:
            t99 = jj_consume_token(CAL);
            t88 = jj_consume_token(INTEGER);
            break;
          default:
            jj_la1[70] = jj_gen;
            ;
          }
          break;
        case FLOAT:
          t11 = jj_consume_token(FLOAT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CAL:
            t44 = jj_consume_token(CAL);
            t55 = jj_consume_token(INTEGER);
            break;
          default:
            jj_la1[71] = jj_gen;
            ;
          }
          break;
        case K_NOT:
        case LETTER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NOT:
            t33 = jj_consume_token(K_NOT);
            break;
          default:
            jj_la1[72] = jj_gen;
            ;
          }
          t11_1 = jj_consume_token(LETTER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_AND:
            t66 = jj_consume_token(K_AND);
            t77 = jj_consume_token(LETTER);
            break;
          default:
            jj_la1[73] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
        case K_AS:
        case 35:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 0:
            jj_consume_token(0);
            break;
          case 35:
            jj_consume_token(35);
            break;
          case K_AS:
            jj_consume_token(K_AS);
            t22_1 = jj_consume_token(LETTER);
            break;
          default:
            jj_la1[75] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[76] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FROM:
        jj_consume_token(K_FROM);
        tN2 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_UNION:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_5;
      }
      u2 = jj_consume_token(K_UNION);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        ;
        break;
      default:
        jj_la1[80] = jj_gen;
        break label_6;
      }
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
        p11 = jj_consume_token(K_PAR);
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t111 = jj_consume_token(INTEGER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAL:
          t44 = jj_consume_token(CAL);
          t55 = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[82] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PAR:
          jj_consume_token(K_PAR);
          break;
        default:
          jj_la1[83] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAL:
          t99 = jj_consume_token(CAL);
          t88 = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[84] = jj_gen;
          ;
        }
        break;
      case FLOAT:
        t11 = jj_consume_token(FLOAT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAL:
          t44 = jj_consume_token(CAL);
          t55 = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[85] = jj_gen;
          ;
        }
        break;
      case K_NOT:
      case LETTER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          t33 = jj_consume_token(K_NOT);
          break;
        default:
          jj_la1[86] = jj_gen;
          ;
        }
        t111 = jj_consume_token(LETTER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AND:
          t66 = jj_consume_token(K_AND);
          t77 = jj_consume_token(LETTER);
          break;
        default:
          jj_la1[87] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case K_AS:
      case 35:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
          jj_consume_token(0);
          break;
        case 35:
          jj_consume_token(35);
          break;
        case K_AS:
          jj_consume_token(K_AS);
          t222 = jj_consume_token(LETTER);
          break;
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        jj_consume_token(K_COMMA);
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PAR:
      case K_NOT:
      case FLOAT:
      case INTEGER:
      case LETTER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PAR:
          p11 = jj_consume_token(K_PAR);
          break;
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t111_1 = jj_consume_token(INTEGER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CAL:
            t44 = jj_consume_token(CAL);
            t55 = jj_consume_token(INTEGER);
            break;
          default:
            jj_la1[93] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_PAR:
            jj_consume_token(K_PAR);
            break;
          default:
            jj_la1[94] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CAL:
            t99 = jj_consume_token(CAL);
            t88 = jj_consume_token(INTEGER);
            break;
          default:
            jj_la1[95] = jj_gen;
            ;
          }
          break;
        case FLOAT:
          t11 = jj_consume_token(FLOAT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CAL:
            t44 = jj_consume_token(CAL);
            t55 = jj_consume_token(INTEGER);
            break;
          default:
            jj_la1[96] = jj_gen;
            ;
          }
          break;
        case K_NOT:
        case LETTER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NOT:
            t33 = jj_consume_token(K_NOT);
            break;
          default:
            jj_la1[97] = jj_gen;
            ;
          }
          t111_1 = jj_consume_token(LETTER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_AND:
            t66 = jj_consume_token(K_AND);
            t77 = jj_consume_token(LETTER);
            break;
          default:
            jj_la1[98] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
        case K_AS:
        case 35:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 0:
            jj_consume_token(0);
            break;
          case 35:
            jj_consume_token(35);
            break;
          case K_AS:
            jj_consume_token(K_AS);
            t222_1 = jj_consume_token(LETTER);
            break;
          default:
            jj_la1[100] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[101] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FROM:
        jj_consume_token(K_FROM);
        tN3 = jj_consume_token(LETTER);
        break;
      default:
        jj_la1[103] = jj_gen;
        ;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SELECT:
      jj_consume_token(K_SELECT);
      S1 = jj_consume_token(LETTER);
      jj_consume_token(36);
      S2 = jj_consume_token(LETTER);
      jj_consume_token(K_COMMA);
      S3 = jj_consume_token(LETTER);
      jj_consume_token(36);
      S4 = jj_consume_token(LETTER);
      jj_consume_token(K_COMMA);
      S5 = jj_consume_token(LETTER);
      jj_consume_token(36);
      S6 = jj_consume_token(LETTER);
      jj_consume_token(K_COMMA);
      S7 = jj_consume_token(LETTER);
      jj_consume_token(36);
      S8 = jj_consume_token(LETTER);
      jj_consume_token(K_FROM);
      st1 = jj_consume_token(LETTER);
      jj_consume_token(K_COMMA);
      st2 = jj_consume_token(LETTER);
      jj_consume_token(35);
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    if (u1==null)
    {
      int flag=0;
      query1=new ProjectionNode();
        if (t2==null)//as
        {
          if (t5!=null && t8!=null&& p1!=null) // dai kuo hao
          {
            i1 = (int)Integer.parseInt(t1.image);
            i2 = (int)Integer.parseInt(t5.image);
            int i3=(int)Integer.parseInt(t8.image);
            if (t4.image.contains("+") && t9.image.contains("*"))
            {
        query1.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.MULT, new ExprTree(ExprTree.OpCode.ADD, new ExprTree.ConstLeaf(i1), new ExprTree.ConstLeaf(i2)), new ExprTree.ConstLeaf(i3))));
        }
        NullSourceNode child_1 = new NullSourceNode(1);
        query1.setChild(child_1);
          }
          else if (t5!=null && !t1.image.contains(".") && t8==null)
          {
            i1 = (int)Integer.parseInt(t1.image);
            i2 = (int)Integer.parseInt(t5.image);
            if (t4.image.contains("+"))
            {
        query1.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.ConstLeaf(i1), new ExprTree.ConstLeaf(i2))));
        }
        else if (t4.image.contains("*"))
        {
        query1.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.ConstLeaf(i1), new ExprTree.ConstLeaf(i2))));
        }
        NullSourceNode child_1 = new NullSourceNode(1);
        query1.setChild(child_1);
          }
          else if (t5!=null && t1.image.contains(".") && t8==null)
          {
            f1=Float.parseFloat(t1.image);
            i2 = (int)Integer.parseInt(t5.image);
            if (t4.image.contains("+"))
            {
        query1.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.ConstLeaf(f1), new ExprTree.ConstLeaf(i2))));
        }
        else if (t4.image.contains("*"))
        {
        query1.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.ConstLeaf(f1), new ExprTree.ConstLeaf(i2))));
        }
        NullSourceNode child_1 = new NullSourceNode(1);
        query1.setChild(child_1);
          }
          else
          {
            s1=t1.image;
        if (!t1.image.contains("."))
        {
                if (t1.image.contains("TRUE") || t1.image.contains("true")||t1.image.contains("FALSE"))
                {
                String s2=t1.image.toLowerCase();
                if (t3!=null && t3.image.contains("NOT"))
                {
                  if (s2.equals("true"))
                  {
                    s2="false";
                  }
                  else
                  {
                    s2="true";
                  }
                }
                if (t6!=null && t6.image.equals("AND"))
                {
                  String s3=t7.image.toLowerCase();
                  if (s2.equals("true") && s3.equals("false"))
                  {
                    s2="false";
                  }
                }
                else if (t6!=null && t6.image.equals("OR"))
                {
                  String s3=t7.image.toLowerCase();
                  if (s2.equals("true") && s3.equals("false"))
                  {
                    s2="true";
                  }
                }
                query1.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(s2)));
                NullSourceNode child_1 = new NullSourceNode(1);
                query1.setChild(child_1);
                }
                else if (t1.image.matches("[^0-9]+") && tN1==null) // floorbar zi fu chuan
                {
                String s2=t1.image;
                if (s2.substring(0,1).equals("\u005c'"))
                {
                                s2=s2.substring(1,s2.length()-1);
                }
            int i4=0;
            int i3=0;
            int i5=s2.length();
            if (s2.contains("\u005c\u005c"))
            {
               i3=s2.indexOf("\u005c\u005c");
               String s3="";
               for (i4=s2.indexOf("\u005c\u005c");i4<s2.length();i4=i4+2){
                        if (s2.substring(i4,i4+1).equals("\u005c\u005c"))
                        {
                        s3=s3+s2.substring(i4+1,i4+2);
                        }
                }
            s2=s2.substring(0,i3)+s3;
                }
                query1.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(s2)));
            NullSourceNode child_1 = new NullSourceNode(1);
            query1.setChild(child_1);
                }
                else if (t1.image.matches("[^0-9]+") && a1!=null  && tN1!=null && tN1_1==null && a2==null)
                {
                  Schema.TableFromFile table_R=tables.get(tN1.image);
                  ScanNode child_1 = new ScanNode(tN1.image, tN1.image,  table_R);
                          flag=1;
                          if (a1.image.contains("SUM"))
                          {
                  query4.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree.VarLeaf(null, t1.image),AggregateNode.AType.SUM));
                  }
                  else if (a1.image.contains("AVG"))
                  {
                  query4.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree.VarLeaf(null, t1.image),AggregateNode.AType.AVG));
                  }
                  else if (a1.image.contains("MIN"))
                  {
                  query4.addAggregate(new AggregateNode.AggColumn("Min", new ExprTree.VarLeaf(null, t1.image),AggregateNode.AType.MIN));
                  }
                  else if (a1.image.contains("MAX"))
                  {
                  query4.addAggregate(new AggregateNode.AggColumn("Max", new ExprTree.VarLeaf(null, t1.image),AggregateNode.AType.MAX));
                  }
                  else if (a1.image.contains("COUNT"))
                  {
                  query4.addAggregate(new AggregateNode.AggColumn("Count", new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));
                  }
                  query4.setChild(child_1);
                }
                else if (t1.image.matches("[^0-9]+") && a1!=null  && tN1!=null && tN1_1!=null && a2==null)
                {
                  if (w1!=null && com1.image.contains("="))
                  {
                    if (l3!=null && aor1==null)
                    {
                       Schema.TableFromFile table_S=tables.get(tN1_1.image);
                        Schema.TableFromFile table_R=tables.get(tN1.image);
                        ScanNode lhs_3 = new ScanNode(tN1.image, tN1.image, table_R);
                        ScanNode rhs_4 = new ScanNode(tN1_1.image, tN1_1.image, table_S);
                        JoinNode child_2 = new JoinNode();
                        child_2.setLHS(lhs_3);
                        child_2.setRHS(rhs_4);
                        SelectionNode child_1 = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(w1.image, wc1.image), new ExprTree.VarLeaf(w2.image, wc2.image)));
                        child_1.setChild(child_2);
                        flag=1;
                        if (a1.image.contains("SUM"))
                        {
                        query4.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null, t1.image), new ExprTree.VarLeaf(null, l3.image)),AggregateNode.AType.SUM));
                        query4.setChild(child_1);
                        }
                    }
                    else if (l3!=null && aor1.image.contains("AND"))
                    {
                      Schema.TableFromFile table_T=tables.get(tN1_2.image);
                      Schema.TableFromFile table_S=tables.get(tN1_1.image);
                      Schema.TableFromFile table_R=tables.get(tN1.image);
                          ScanNode lhs_5 = new ScanNode(tN1.image, tN1.image, table_R);
                      ScanNode rhs_6 = new ScanNode(tN1_1.image, tN1_1.image, table_S);
                          JoinNode lhs_3 = new JoinNode();
                          lhs_3.setLHS(lhs_5);
                          lhs_3.setRHS(rhs_6);
                          ScanNode rhs_4 = new ScanNode(tN1_2.image, tN1_2.image, table_T);
                          JoinNode child_2 = new JoinNode();
                          child_2.setLHS(lhs_3);
                          child_2.setRHS(rhs_4);
                          SelectionNode child_1 = new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(w1.image, wc1.image), new ExprTree.VarLeaf(w2.image, wc2.image)), new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(w11.image, wc11.image), new ExprTree.VarLeaf(w22.image, wc22.image))));
                          child_1.setChild(child_2);
                          AggregateNode query_0 = new AggregateNode();
                          flag=1;
                          if (a1.image.contains("SUM"))
                          {
                          query4.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null, t1.image), new ExprTree.VarLeaf(null, l3.image)),AggregateNode.AType.SUM));
                          query4.setChild(child_1);
                          }

                    }
                    else
                    {
                    Schema.TableFromFile table_S=tables.get(tN1_1.image);
                        Schema.TableFromFile table_R=tables.get(tN1.image);
                        ScanNode lhs_2 = new ScanNode(tN1.image, tN1.image, table_R);
                        ScanNode rhs_3 = new ScanNode(tN1_1.image, tN1_1.image, table_S);
                        JoinNode child_2 = new JoinNode();
                        child_2.setLHS(lhs_2);
                        child_2.setRHS(rhs_3);
                        SelectionNode child_1 = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(w1.image, wc1.image), new ExprTree.VarLeaf(w2.image, wc2.image)));
                        child_1.setChild(child_2);
                        flag=1;
                        if (a1.image.contains("COUNT"))
                        {
                        query4.addAggregate(new AggregateNode.AggColumn("Count", new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));
                        }
                        else if (a1.image.contains("SUM"))
                        {
                        query4.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree.VarLeaf(null, t1.image),AggregateNode.AType.SUM));
                        }
                        query4.setChild(child_1);
                        }
                  }
                  else
                  {
                  Schema.TableFromFile table_S=tables.get(tN1_1.image);
                  Schema.TableFromFile table_R=tables.get(tN1.image);
                  ScanNode lhs_2 = new ScanNode(tN1.image, tN1.image, table_R);
                  ScanNode rhs_3 = new ScanNode(tN1_1.image, tN1_1.image, table_S);
                  JoinNode child_1 = new JoinNode();
                  child_1.setLHS(lhs_2);
                  child_1.setRHS(rhs_3);
                  flag=1;
                  if (a1.image.contains("COUNT"))
                  {
                  query4.addAggregate(new AggregateNode.AggColumn("Count", new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));
                  }
                  query4.setChild(child_1);
                  }

                }
                else if (t1.image.matches("[^0-9]+") && a1!=null  && tN1!=null && tN1_1!=null && a2!=null &&w1!=null && com1.image.contains("="))
                {
                  if (l2!=null && l3!=null)
                  {
                  Schema.TableFromFile table_S=tables.get(tN1_1.image);
                  Schema.TableFromFile table_R=tables.get(tN1.image);
                  ScanNode lhs_3 = new ScanNode(tN1.image, tN1.image, table_R);
                  ScanNode rhs_4 = new ScanNode(tN1_1.image, tN1_1.image, table_S);
                  JoinNode child_2 = new JoinNode();
                  child_2.setLHS(lhs_3);
                  child_2.setRHS(rhs_4);
                  SelectionNode child_1 = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(w1.image, wc1.image), new ExprTree.VarLeaf(w2.image, wc2.image)));
                  child_1.setChild(child_2);
                  if (a1.image.contains("SUM") && a2.image.contains("AVG"))
                  {
                  flag=1;
                  query4.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null, t1.image), new ExprTree.VarLeaf(null, l3.image)),AggregateNode.AType.SUM));
                  query4.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null, t1_1.image), new ExprTree.VarLeaf(null, l2.image)),AggregateNode.AType.AVG));
                  query4.setChild(child_1);
                  }

                  }
                  else
                  {
                  Schema.TableFromFile table_S=tables.get(tN1_1.image);
                  Schema.TableFromFile table_R=tables.get(tN1.image);
                  ScanNode lhs_3 = new ScanNode(tN1.image, tN1.image, table_R);
                  ScanNode rhs_4 = new ScanNode(tN1_1.image, tN1_1.image, table_S);
                  JoinNode child_2 = new JoinNode();
                  child_2.setLHS(lhs_3);
                  child_2.setRHS(rhs_4);
                  SelectionNode child_1 = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(w1.image, wc1.image), new ExprTree.VarLeaf(w2.image, wc2.image)));
                  child_1.setChild(child_2);
                  if (a1.image.contains("SUM") && a2.image.contains("AVG"))
                  {
                  flag=1;
                  query4.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree.VarLeaf(null, t1.image),AggregateNode.AType.SUM));
                  query4.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree.VarLeaf(null, t1_1.image),AggregateNode.AType.AVG));
                  query4.setChild(child_1);
                  }
                  }

                }
                else if (t1.image.matches("[^0-9]+") && tN1!=null && tc1==null && t1_1==null &&tc1_1==null)
                {
                  Schema.TableFromFile table_R=tables.get(tN1.image);
                          ScanNode child_3 = new ScanNode(tN1.image, tN1.image, table_R);
                  ProjectionNode lhs_1 = new ProjectionNode();
                  query1.addColumn(new ProjectionNode.Column(t1.image, new ExprTree.VarLeaf(null, t1.image)));
                  query1.setChild(child_3);
                }
                else if (t1.image.matches ("[^0-9]+") && tN1!=null && tc1!=null && t1_1!=null && tc1_1!=null && tN1_1!=null && t1_2==null && tc1_2==null && t1_3==null && tc1_3==null )
                {
                  if (j1==null && w1==null)
                  {
                  Schema.TableFromFile table_R=tables.get(tN1.image);
                  Schema.TableFromFile table_S=tables.get(tN1_1.image);
                  ScanNode lhs_2 = new ScanNode(t1.image, t1.image, table_R);
              ScanNode rhs_3 = new ScanNode(t1_1.image, t1_1.image, table_S);
                  JoinNode child_1 = new JoinNode();
                  child_1.setLHS(lhs_2);
                  child_1.setRHS(rhs_3);
                  query1.addColumn(new ProjectionNode.Column(tc1.image, new ExprTree.VarLeaf(t1.image, tc1.image)));
                  query1.addColumn(new ProjectionNode.Column(tc1_1.image, new ExprTree.VarLeaf(t1_1.image, tc1_1.image)));
                  query1.setChild(child_1);
                 }
                 else if (j1==null && w1!=null && com1.image.contains("=") && aor1==null && aor2==null)
                 {
                    Schema.TableFromFile table_S=tables.get(tN1_1.image);
                    Schema.TableFromFile table_R=tables.get(tN1.image);
                        ScanNode lhs_3 = new ScanNode(tN1.image, tN1.image, table_R);
                        ScanNode rhs_4 = new ScanNode(tN1_1.image, tN1_1.image, table_S);
                        JoinNode child_2 = new JoinNode();
                        child_2.setLHS(lhs_3);
                        child_2.setRHS(rhs_4);
                        SelectionNode child_1 = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(tN1.image, wc1.image), new ExprTree.VarLeaf(tN1_1.image, wc2.image)));
                        child_1.setChild(child_2);

                        query1.addColumn(new ProjectionNode.Column(tc1.image, new ExprTree.VarLeaf(t1.image, tc1.image)));
                        query1.addColumn(new ProjectionNode.Column(tc1_1.image, new ExprTree.VarLeaf(t1_1.image, tc1_1.image)));
                        query1.setChild(child_1);
                 }
                 else if (j1==null && w1!=null && com1.image.contains("=") && com2.image.contains(">") && com3.image.contains("<") && aor1.image.contains("AND") && aor2.image.contains("or") && p7!=null && p5!=null )
                 {
                   Schema.TableFromFile table_S=tables.get(tN1_1.image);
                   Schema.TableFromFile table_R=tables.get(tN1.image);
                   ScanNode lhs_3 = new ScanNode(tN1.image, tN1.image,  table_R);
                   ScanNode rhs_4 = new ScanNode(tN1_1.image, tN1_1.image, table_S);
                   JoinNode child_2 = new JoinNode();
                   child_2.setLHS(lhs_3);
                   child_2.setRHS(rhs_4);
                   SelectionNode child_1 = new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(tN1.image, wc1.image), new ExprTree.VarLeaf(tN1_1.image, wc2.image)), new ExprTree(ExprTree.OpCode.OR, new ExprTree(ExprTree.OpCode.GT, new ExprTree.VarLeaf(tN1.image, wc11.image), new ExprTree.VarLeaf(tN1_1.image, wc22.image)), new ExprTree(ExprTree.OpCode.LT, new ExprTree.VarLeaf(tN1.image, wc111.image), new ExprTree.VarLeaf(tN1_1.image, wc222.image)))));
                   child_1.setChild(child_2);
                   query1.addColumn(new ProjectionNode.Column(tc1.image, new ExprTree.VarLeaf(t1.image, tc1.image)));
                   query1.addColumn(new ProjectionNode.Column(tc1_1.image, new ExprTree.VarLeaf(t1_1.image, tc1_1.image)));
                   query1.setChild(child_1);
                 }
                 else if (j1==null && tN1!=null && tN1_1!=null && tN1_2!=null && w1!=null && com1!=null && com2!=null  && aor1.image.contains("AND") && aor2==null)
                         {
                           Schema.TableFromFile table_T=tables.get(tN1_2.image);
                   Schema.TableFromFile table_S=tables.get(tN1_1.image);
                   Schema.TableFromFile table_R=tables.get(tN1.image);

                   ScanNode lhs_5 = new ScanNode(tN1.image, tN1.image, table_R);
                   ScanNode rhs_6 = new ScanNode(tN1_1.image, tN1_1.image, table_S);
                   JoinNode lhs_3 = new JoinNode();
                   lhs_3.setLHS(lhs_5);
                   lhs_3.setRHS(rhs_6);
                   ScanNode rhs_4 = new ScanNode(tN1_2.image, tN1_2.image, table_T);
                   JoinNode child_2 = new JoinNode();
                   child_2.setLHS(lhs_3);
                   child_2.setRHS(rhs_4);
                   if (com1.image.contains("=") && com2.image.contains("="))
                   {
                   SelectionNode child_1 = new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(w1.image, wc1.image), new ExprTree.VarLeaf(w2.image, wc2.image)), new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(w11.image, wc11.image), new ExprTree.VarLeaf(w22.image, wc22.image))));
                   child_1.setChild(child_2);
                   query1.addColumn(new ProjectionNode.Column(tc1.image, new ExprTree.VarLeaf(t1.image, tc1.image)));
                   query1.addColumn(new ProjectionNode.Column(tc1_1.image, new ExprTree.VarLeaf(t1_1.image, tc1_1.image)));
                   query1.setChild(child_1);
                   }
                   else if (com1.image.contains("=") && com2.image.contains("< "))
                   {
                   SelectionNode child_1 = new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(w1.image, wc1.image), new ExprTree.VarLeaf(w2.image, wc2.image)), new ExprTree(ExprTree.OpCode.LT, new ExprTree.VarLeaf(w11.image, wc11.image), new ExprTree.VarLeaf(w22.image, wc22.image))));
                   child_1.setChild(child_2);
                   query1.addColumn(new ProjectionNode.Column(tc1.image, new ExprTree.VarLeaf(t1.image, tc1.image)));
                   query1.addColumn(new ProjectionNode.Column(tc1_1.image, new ExprTree.VarLeaf(t1_1.image, tc1_1.image)));
                   query1.setChild(child_1);
                   }
                         }
                 else if (j1!=null && com1.image.contains("=") && w1==null)
                 {
                   Schema.TableFromFile table_R=tables.get(tN1.image);
                   Schema.TableFromFile table_S=tables.get(tN1_1.image);
                   ScanNode lhs_2 = new ScanNode(t1.image, t1.image, table_R);
               ScanNode rhs_3 = new ScanNode(t1_1.image, t1_1.image, table_S);
                   JoinNode child_2 = new JoinNode();
                   child_2.setLHS(lhs_2);
                   child_2.setRHS(rhs_3);
                   SelectionNode child_1 = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(o1.image, oc1.image), new ExprTree.VarLeaf(o2.image, oc2.image)));
                   child_1.setChild(child_2);
                   query1.addColumn(new ProjectionNode.Column(tc1.image, new ExprTree.VarLeaf(t1.image, tc1.image)));
                   query1.addColumn(new ProjectionNode.Column(tc1_1.image, new ExprTree.VarLeaf(t1_1.image, tc1_1.image)));
               query1.setChild(child_1);
                 }
                }

                else // zheng xing
                {
                i1 = (int)Integer.parseInt(t1.image);
                query1.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(i1)));
                NullSourceNode child_1 = new NullSourceNode(1);
                query1.setChild(child_1);
                }


        }
        else if (t1.image.contains(".")) // fu dian 
        {
                f1=Float.parseFloat(t1.image);
                query1.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(f1)));
        NullSourceNode child_1 = new NullSourceNode(1);
        query1.setChild(child_1);
        }
          }

        }
        else if (t2!=null)
        {
        if (!t1.image.contains("."))
        {
        i1 = (int)Integer.parseInt(t1.image);
        query1.addColumn(new ProjectionNode.Column(t2.image, new ExprTree.ConstLeaf(i1)));
        NullSourceNode child_1 = new NullSourceNode(1);
        query1.setChild(child_1);
        }
        else if (t1.image.contains("."))
        {
                f1=Float.parseFloat(t1.image);
                query1.addColumn(new ProjectionNode.Column(t2.image, new ExprTree.ConstLeaf(f1)));
        NullSourceNode child_1 = new NullSourceNode(1);
        query1.setChild(child_1);
        }
        }
        {
          if (flag==0)
          {
      query3= query1;
      query.add(query3);
      }
          else if (flag==1)
          {
          query3=query4;
          query.add(query3);
          }
    }
  }
  else if (u1!=null && u2==null)
  {
        if (t1.image.matches("[0-9]+") && t11.image.matches("[0-9]+") && t2!=null)
        {
                if (t1_1!=null && t1_1.image.matches("[0-9]+") && t11_1!=null && t11_1.image.matches("[0-9]+") && t2_1!=null)
                {
                i1 = (int)Integer.parseInt(t1.image);
                int i1_1=(int)Integer.parseInt(t1_1.image);
                int i11=(int)Integer.parseInt(t11.image);
                int i11_1=(int)Integer.parseInt(t11_1.image);
                NullSourceNode child_3 = new NullSourceNode(1);
        ProjectionNode lhs_1 = new ProjectionNode();
        lhs_1.addColumn(new ProjectionNode.Column(t2.image, new ExprTree.ConstLeaf(i1)));
        lhs_1.addColumn(new ProjectionNode.Column(t2_1.image, new ExprTree.ConstLeaf(i1_1)));
        lhs_1.setChild(child_3);
        NullSourceNode child_4 = new NullSourceNode(1);
        ProjectionNode rhs_2 = new ProjectionNode();
        rhs_2.addColumn(new ProjectionNode.Column(t2.image, new ExprTree.ConstLeaf(i11)));
        rhs_2.addColumn(new ProjectionNode.Column(t2_1.image, new ExprTree.ConstLeaf(i11_1)));
        rhs_2.setChild(child_4);
        query2.setLHS(lhs_1);
        query2.setRHS(rhs_2);
                }
                else
                {
                i1 = (int)Integer.parseInt(t1.image);
                int i11=(int)Integer.parseInt(t11.image);
                NullSourceNode child_3 = new NullSourceNode(1);
        ProjectionNode lhs_1 = new ProjectionNode();
        lhs_1.addColumn(new ProjectionNode.Column(t2.image, new ExprTree.ConstLeaf(i1)));
        lhs_1.setChild(child_3);
        NullSourceNode child_4 = new NullSourceNode(1);
        ProjectionNode rhs_2 = new ProjectionNode();
        rhs_2.addColumn(new ProjectionNode.Column(t2.image, new ExprTree.ConstLeaf(i11)));
        rhs_2.setChild(child_4);
        query2.setLHS(lhs_1);
        query2.setRHS(rhs_2);
                }
        }
        else if (t1.image.matches("[^0-9]+") && t11.image.matches("[^0-9]+") && t1_1!=null && t11_1!=null && t1_1.image.matches("[^0-9]+") && t11_1.image.matches("[^0-9]+"))//union 04
        {
          //t1,t1_1,t11,t11_1,tN1,tN2
      Schema.TableFromFile table_R=tables.get(tN1.image);
          ScanNode child_3 = new ScanNode(tN1.image, tN1.image, table_R);
      ProjectionNode lhs_1 = new ProjectionNode();
      lhs_1.addColumn(new ProjectionNode.Column(t1.image, new ExprTree.VarLeaf(null, t1.image)));
      lhs_1.addColumn(new ProjectionNode.Column(t1_1.image, new ExprTree.VarLeaf(null, t1_1.image)));
      lhs_1.setChild(child_3);
      Schema.TableFromFile table_S=tables.get(tN2.image);
      ScanNode child_4 = new ScanNode(tN2.image, tN2.image, table_S);
      ProjectionNode rhs_2 = new ProjectionNode();
      rhs_2.addColumn(new ProjectionNode.Column(t11.image, new ExprTree.VarLeaf(null, t11.image)));
      rhs_2.addColumn(new ProjectionNode.Column(t11_1.image, new ExprTree.VarLeaf(null, t11_1.image)));
      rhs_2.setChild(child_4);
      query2.setLHS(lhs_1);
      query2.setRHS(rhs_2);
        }
        else if (t1.image.matches("[^0-9]+") && t11.image.matches("[0-9]+") && t1_1!=null && t11_1!=null && t1_1.image.matches("[^0-9]+") && t11_1.image.matches("[0-9]+"))
        {
          s1=tN1.image;
          Schema.TableFromFile table_R=tables.get(tN1.image);
          ScanNode child_3 = new ScanNode(tN1.image, tN1.image, table_R);
      ProjectionNode lhs_1 = new ProjectionNode();
      lhs_1.addColumn(new ProjectionNode.Column(t1.image, new ExprTree.VarLeaf(null, t1.image)));
      lhs_1.addColumn(new ProjectionNode.Column(t1_1.image, new ExprTree.VarLeaf(null, t1_1.image)));
      lhs_1.setChild(child_3);
      int i11=(int)Integer.parseInt(t11.image);
          int i11_1=(int)Integer.parseInt(t11_1.image);
      NullSourceNode child_4 = new NullSourceNode(1);
      ProjectionNode rhs_2 = new ProjectionNode();
      rhs_2.addColumn(new ProjectionNode.Column(t22.image, new ExprTree.ConstLeaf(i11)));
      rhs_2.addColumn(new ProjectionNode.Column(t22_1.image, new ExprTree.ConstLeaf(i11_1)));
      rhs_2.setChild(child_4);
      query2.setLHS(lhs_1);
      query2.setRHS(rhs_2);
        }
        else if (t1.image.matches("[^0-9]+") && t11.image.matches("[^0-9]+") && t1_1==null && t11_1==null)
        {
          Schema.TableFromFile table_R=tables.get(tN1.image);
          ScanNode child_3 = new ScanNode(tN1.image, tN1.image, table_R);
      ProjectionNode lhs_1 = new ProjectionNode();
      lhs_1.addColumn(new ProjectionNode.Column(t1.image, new ExprTree.VarLeaf(null, t1.image)));
      lhs_1.setChild(child_3);
      Schema.TableFromFile table_S=tables.get(tN2.image);
      ScanNode child_4 = new ScanNode(tN2.image, tN2.image, table_S);
      ProjectionNode rhs_2 = new ProjectionNode();
      rhs_2.addColumn(new ProjectionNode.Column(t11.image, new ExprTree.VarLeaf(null, t11.image)));
      rhs_2.setChild(child_4);
      query2.setLHS(lhs_1);
      query2.setRHS(rhs_2);
        }
    {
      query3= query2;
      query.add(query3);
    }
  }
  else if (u1!=null && u2!=null)
  {
        if (t1.image.matches("[0-9]+") && t11.image.matches("[0-9]+") && t111.image.matches("[0-9]+")
        &&t1_1.image.matches("[0-9]+") && t11_1.image.matches("[0-9]+") && t111_1.image.matches("[0-9]+")
        && t2!=null && t2_1!=null )
        {
        i1 = (int)Integer.parseInt(t1.image);
        int i1_1=(int)Integer.parseInt(t1_1.image);
        int i11=(int)Integer.parseInt(t11.image);
        int i11_1=(int)Integer.parseInt(t11_1.image);
        int i111=(int)Integer.parseInt(t111.image);
        int i111_1=(int)Integer.parseInt(t111_1.image);
        NullSourceNode child_3 = new NullSourceNode(1);
    ProjectionNode lhs_1 = new ProjectionNode();
    lhs_1.addColumn(new ProjectionNode.Column(t2.image, new ExprTree.ConstLeaf(i1)));
    lhs_1.addColumn(new ProjectionNode.Column(t2_1.image, new ExprTree.ConstLeaf(i1_1)));
    lhs_1.setChild(child_3);
    NullSourceNode child_6 = new NullSourceNode(1);
    ProjectionNode lhs_4 = new ProjectionNode();
    lhs_4.addColumn(new ProjectionNode.Column(t2.image, new ExprTree.ConstLeaf(i11)));
    lhs_4.addColumn(new ProjectionNode.Column(t2_1.image, new ExprTree.ConstLeaf(i11_1)));
    lhs_4.setChild(child_6);
    NullSourceNode child_7 = new NullSourceNode(1);
    ProjectionNode rhs_5 = new ProjectionNode();
    rhs_5.addColumn(new ProjectionNode.Column(t2.image, new ExprTree.ConstLeaf(i111)));
    rhs_5.addColumn(new ProjectionNode.Column(t2_1.image, new ExprTree.ConstLeaf(i111_1)));
    rhs_5.setChild(child_7);
    UnionNode rhs_2 = new UnionNode();
    rhs_2.setLHS(lhs_4);
    rhs_2.setRHS(rhs_5);
    query2.setLHS(lhs_1);
    query2.setRHS(rhs_2);
        }
        else if (t1.image.matches("[^0-9]+") && t11.image.matches("[^0-9]+") && t111.image.matches("[^0-9]+") && t1_1.image.matches("[^0-9]+") && t11_1.image.matches("[^0-9]+") && t111_1.image.matches("[^0-9]+"))
        {
          Schema.TableFromFile table_R=tables.get(tN1.image);
          ScanNode child_3 = new ScanNode(tN1.image, tN1.image, table_R);
      ProjectionNode lhs_1 = new ProjectionNode();
      lhs_1.addColumn(new ProjectionNode.Column(t1.image, new ExprTree.VarLeaf(null, t1.image)));
      lhs_1.addColumn(new ProjectionNode.Column(t1_1.image, new ExprTree.VarLeaf(null, t1_1.image)));
      lhs_1.setChild(child_3);
      Schema.TableFromFile table_S=tables.get(tN2.image);
      ScanNode child_4 = new ScanNode(tN2.image, tN2.image, table_S);
      ProjectionNode rhs_2 = new ProjectionNode();
      rhs_2.addColumn(new ProjectionNode.Column(t11.image, new ExprTree.VarLeaf(null, t11.image)));
      rhs_2.addColumn(new ProjectionNode.Column(t11_1.image, new ExprTree.VarLeaf(null, t11_1.image)));
      rhs_2.setChild(child_4);
      Schema.TableFromFile table_T=tables.get(tN3.image);
      ScanNode child_5 = new ScanNode(tN3.image, tN3.image, table_T);
      ProjectionNode lhs_2 = new ProjectionNode();
      lhs_2.addColumn(new ProjectionNode.Column(t111.image, new ExprTree.VarLeaf(null, t111.image)));
      lhs_2.addColumn(new ProjectionNode.Column(t111_1.image, new ExprTree.VarLeaf(null, t111_1.image)));
      lhs_2.setChild(child_5);
      UnionNode rhs_1 = new UnionNode();
      rhs_1.setLHS(lhs_2);
      rhs_1.setRHS(rhs_2);
      query2.setLHS(lhs_1);
      query2.setRHS(rhs_1);
        }
    {
      query3= query2;
      query.add(query3);
    }
  }
  if (S1!=null && S2!=null && S3!=null)//(t1.image.matches ("[^0-9]+") && tN1!=null && tc1!=null && t1_1!=null && tc1_1!=null && tN1_1!=null && t1_2!=null && tc1_2!=null && t1_3!=null && tc1_3!=null)
    {
    Schema.TableFromFile table_S=tables.get(st2.image);
    Schema.TableFromFile table_R=tables.get(st1.image);
        ScanNode lhs_6 = new ScanNode(st1.image, st1.image, table_R);
        ScanNode rhs_7 = new ScanNode(st2.image, st2.image, table_S);
    JoinNode child_5 = new JoinNode();
    child_5.setLHS(lhs_6);
    child_5.setRHS(rhs_7);

    query_1.addColumn(new ProjectionNode.Column(S2.image, new ExprTree.VarLeaf(st1.image, S2.image)));
    query_1.addColumn(new ProjectionNode.Column(S4.image, new ExprTree.VarLeaf(st1.image, S4.image)));
    query_1.addColumn(new ProjectionNode.Column(S6.image, new ExprTree.VarLeaf(st2.image, S6.image)));
    query_1.addColumn(new ProjectionNode.Column(S8.image, new ExprTree.VarLeaf(st2.image, S8.image)));
    query_1.setChild(child_5);
    query.add(query_1);
    }
     {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(K_CREATE)) return true;
    if (jj_scan_token(K_TABLE)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[105];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x820,0x20,0x400000,0x80000,0x10000000,0x80000,0x10000000,0x10000000,0x100000,0x0,0x40000,0x10000000,0x80000,0x70100000,0x20001,0x20001,0x8000000,0x400000,0x80000,0x10000000,0x80000,0x10000000,0x10000000,0x100000,0x0,0x40000,0x10000000,0x80000,0x60100000,0x8000000,0x8000000,0x20001,0x20001,0x60180000,0x8000000,0x2000,0x0,0x8000000,0x0,0x80,0x4000,0x80000,0x80000,0x80000,0x40000,0x80000,0x80000,0x0,0x80000,0x40000,0x80000,0x0,0x80000,0x1000,0x10000,0x800,0x80000,0x10000000,0x80000,0x10000000,0x10000000,0x100000,0x40000,0x60100000,0x20001,0x20001,0x8000000,0x80000,0x10000000,0x80000,0x10000000,0x10000000,0x100000,0x40000,0x60100000,0x20001,0x20001,0x60180000,0x80,0x10000,0x800,0x80000,0x10000000,0x80000,0x10000000,0x10000000,0x100000,0x40000,0x60100000,0x20001,0x20001,0x8000000,0x80000,0x10000000,0x80000,0x10000000,0x10000000,0x100000,0x40000,0x60100000,0x20001,0x20001,0x60180000,0x80,0x800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x2,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x2,0x0,0x0,0x8,0x8,0x2,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x8,0x8,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x8,0x8,0x2,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserGrammar(ParserGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 105; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
